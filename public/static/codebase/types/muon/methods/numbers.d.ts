import { cellValue, mathArgument } from "../types";
declare function SUM(...rest: cellValue[]): number;
declare function AVERAGE(...rest: mathArgument[]): number;
declare function AVERAGEA(...rest: mathArgument[]): number;
declare function COUNT(...rest: mathArgument[]): number;
declare function COUNTA(...rest: cellValue[]): number;
declare function COUNTBLANK(...rest: cellValue[]): number;
declare function MAX(...rest: cellValue[]): number;
declare function MIN(...rest: cellValue[]): number;
declare function PRODUCT(...rest: cellValue[]): number;
declare function SUMPRODUCT(...sets: cellValue[][]): number;
declare function SUMSQ(...rest: cellValue[]): number;
declare function VAR(...rest: mathArgument[]): number;
declare function VARA(...rest: mathArgument[]): number;
declare function VARP(...rest: mathArgument[]): number;
declare function VARPA(...rest: mathArgument[]): number;
declare function STDEV(...rest: mathArgument[]): number;
declare function STDEVP(...rest: mathArgument[]): number;
declare function STDEVA(...rest: mathArgument[]): number;
declare function STDEVPA(...rest: mathArgument[]): number;
declare function POWER(num: cellValue, pow: cellValue): number;
declare function QUOTIENT(num: cellValue, div: cellValue): number;
declare function SQRT(num: cellValue): number;
declare function ABS(num: cellValue): number;
declare function RAND(): number;
declare function PI(): number;
declare function INT(num: cellValue): number;
declare function ROUND(num: cellValue, digits?: cellValue): number;
declare function ROUNDDOWN(num: cellValue, digits: cellValue): number;
declare function ROUNDUP(num: cellValue, digits?: cellValue): number;
declare function TRUNC(num: cellValue): number;
declare function EVEN(num: cellValue): number;
declare function ODD(num: cellValue): number;
declare function ACOS(num: cellValue): number;
declare function ACOSH(num: cellValue): number;
declare function ACOT(num: cellValue): number;
declare function ACOTH(num: cellValue): number;
declare function ARABIC(num: cellValue): number;
declare function ASIN(num: cellValue): number;
declare function ASINH(num: cellValue): number;
declare function ATAN(num: cellValue): number;
declare function ATAN2(num1: cellValue, num2: cellValue): number;
declare function ATANH(num: cellValue): number;
declare function BASE(num: cellValue, radix: cellValue, minLength?: number): string;
declare function CEILING(num: cellValue, significance?: number, mode?: number): number;
declare function COS(num: cellValue): number;
declare function COSH(num: cellValue): number;
declare function COT(num: cellValue): number;
declare function COTH(num: cellValue): number;
declare function CSC(num: cellValue): number;
declare function CSCH(num: cellValue): number;
declare function DEGREES(num: cellValue): number;
declare function DECIMAL(num: cellValue, radix: number): number;
declare function FACT(num: cellValue): number;
declare function FACTDOUBLE(num: cellValue): number;
declare function COMBIN(num: cellValue, number_chosen: cellValue): number;
declare function COMBINA(num: cellValue, number_chosen: cellValue): number;
declare function FLOOR(num: cellValue, significance: number): number;
declare function GCD(...rest: cellValue[]): number;
declare function LN(num: cellValue): number;
declare function LOG(num: cellValue, base?: cellValue): number;
declare function LOG10(num: cellValue): number;
declare function MOD(num: cellValue, divisor: cellValue): number;
declare function MROUND(num: cellValue, factor: cellValue): number;
declare function MULTINOMIAL(...rest: cellValue[]): number;
declare function RADIANS(num: cellValue): number;
declare function RANDBETWEEN(bottom: cellValue, top: cellValue): number;
declare function ROMAN(num: cellValue): string;
declare function SEC(num: cellValue): number;
declare function SECH(num: cellValue): number;
declare function SIN(num: cellValue): number;
declare function SINH(num: cellValue): number;
declare function SQRTPI(num: cellValue): number;
declare function SUBTOTAL(function_code: cellValue, ...rest: cellValue[]): number;
declare function ADD(num1: cellValue, num2: cellValue): number;
declare function MINUS(num1: cellValue, num2: cellValue): number;
declare function DIVIDE(num1: cellValue, num2: cellValue): number;
declare function MULTIPLY(num1: cellValue, num2: cellValue): number;
declare function GT(num1: cellValue, num2: cellValue): boolean;
declare function GTE(num1: cellValue, num2: cellValue): boolean;
declare function LT(num1: cellValue, num2: cellValue): boolean;
declare function LTE(num1: cellValue, num2: cellValue): boolean;
declare function EQ(v: cellValue, v2: cellValue): boolean;
declare function NE(v: cellValue, v2: cellValue): boolean;
declare function POW(base: cellValue, exponent: cellValue): number;
declare function SUMX2MY2(array_x: cellValue[], array_y: cellValue[]): number;
declare function SUMX2PY2(array_x: cellValue[], array_y: cellValue[]): number;
declare function SUMXMY2(array_x: cellValue[], array_y: cellValue[]): number;
declare function TAN(num: cellValue): number;
declare function TANH(num: cellValue): number;
declare function COMPLEX(real: cellValue, i: cellValue, suffix?: string): string;
declare function CORREL(arr1: cellValue[], arr2: cellValue[]): number;
declare function DEC2BIN(num: cellValue, places?: cellValue): string;
declare function DEC2HEX(num: cellValue, places?: cellValue): string;
declare function DEC2OCT(num: cellValue, places?: cellValue): string;
declare function DELTA(num1: cellValue, num2: cellValue): number;
declare function DEVSQ(...rest: cellValue[]): number;
declare function ERF(num: cellValue, upper: cellValue): number;
declare function ERFC(num: cellValue, upper: cellValue): number;
declare function EXP(num: cellValue): number;
declare function FISHER(num: cellValue): number;
declare function FISHERINV(num: cellValue): number;
declare function GAMMA(num: cellValue): number;
declare function GEOMEAN(...rest: cellValue[]): number;
declare function GESTEP(num: cellValue, step?: cellValue): number;
declare function HARMEAN(...rest: cellValue[]): number | string;
declare function HEX2BIN(num: cellValue, places?: cellValue): string;
declare function HEX2DEC(num: cellValue, places?: cellValue): string;
declare function HEX2OCT(num: cellValue, places?: cellValue): string;
declare function IMREAL(inumber: cellValue): number | string;
declare function IMAGINARY(inumber: cellValue): number | string;
declare function IMABS(inumber: cellValue): number | string;
declare function IMCONJUGATE(inumber: cellValue): string;
declare function IMCOS(inumber: cellValue): string;
declare function IMCOSH(inumber: cellValue): string;
declare function IMCOT(inumber: cellValue): string;
declare function IMCSC(inumber: cellValue): string;
declare function IMCSCH(inumber: cellValue): string;
declare function IMDIV(inumber1: cellValue, inumber2: string): string;
declare function IMSIN(inumber: cellValue): string;
declare function IMSINH(inumber: cellValue): string;
declare function IMEXP(inumber: cellValue): string;
declare function IMLN(inumber: cellValue): string;
declare function IMPOWER(inumber: cellValue, pow: cellValue): string;
declare function IMPRODUCT(...inumbers: cellValue[]): string;
declare function IMSEC(inumber: cellValue): string;
declare function IMSECH(inumber: cellValue): string;
declare function IMSQRT(inumber: cellValue): string;
declare function IMSUB(inumber1: cellValue, inumber2: string): string;
declare function IMSUM(...inumbers: cellValue[]): string;
declare function IMTAN(inumber: cellValue): string;
declare function LARGE(arr: cellValue[], value: cellValue): number;
declare function MEDIAN(...rest: cellValue[]): number;
declare function OCT2BIN(num: cellValue, places?: cellValue): string;
declare function OCT2DEC(num: cellValue, places?: cellValue): string;
declare function OCT2HEX(num: cellValue, places?: cellValue): string;
declare function PERMUT(num: cellValue, number_chosen: cellValue): number;
declare function PERCENTILE(arr: cellValue[], k_value: cellValue, mode?: boolean): number;
declare function PERCENTILEEXC(arr: cellValue[], k_value: cellValue): number;
declare function QUARTILE(arr: cellValue[], q: cellValue, mode?: boolean): number;
declare function QUARTILEEXC(arr: cellValue[], q: cellValue): number;
declare function SIGN(num: cellValue): number;
declare function SMALL(arr: cellValue[], value: cellValue): number;
declare function STEYX(arr1: cellValue[], arr2: cellValue[]): number;
declare function WEIBULL(x: cellValue, alpha: cellValue, beta: cellValue, cumulative: cellValue): number;
declare function AVEDEV(...rest: cellValue[]): number;
declare function BINOMDIST(number_s: cellValue, trials: cellValue, probability_s: cellValue, cumulative?: cellValue): number;
declare function BINOMDISTRANGE(trials: cellValue, probability_s: cellValue, number_s1: cellValue, number_s2: cellValue): number;
declare function BINOMDISTINV(trials: cellValue, probability_s: cellValue, alpha: cellValue): number;
declare function BITAND(num1: cellValue, num2: cellValue): number;
declare function BITOR(num1: cellValue, num2: cellValue): number;
declare function BITXOR(num1: cellValue, num2: cellValue): number;
declare function BITLSHIFT(num: cellValue, amount: cellValue): number;
declare function BITRSHIFT(num: cellValue, amount: cellValue): number;
declare function COVARP(arr1: cellValue[], arr2: cellValue[]): number;
declare function COVARS(arr1: cellValue[], arr2: cellValue[]): number;
declare const methods: {
    ABS: typeof ABS;
    ACOS: typeof ACOS;
    ACOSH: typeof ACOSH;
    ACOT: typeof ACOT;
    ACOTH: typeof ACOTH;
    ADD: typeof ADD;
    ARABIC: typeof ARABIC;
    ASIN: typeof ASIN;
    ASINH: typeof ASINH;
    ATAN: typeof ATAN;
    ATAN2: typeof ATAN2;
    ATANH: typeof ATANH;
    AVEDEV: typeof AVEDEV;
    AVERAGE: typeof AVERAGE;
    AVERAGEA: typeof AVERAGEA;
    BASE: typeof BASE;
    BINOMDIST: typeof BINOMDIST;
    "BINOM.INV": typeof BINOMDISTINV;
    "BINOM.DIST.RANGE": typeof BINOMDISTRANGE;
    "BINOM.DIST": typeof BINOMDIST;
    BITAND: typeof BITAND;
    BITLSHIFT: typeof BITLSHIFT;
    BITOR: typeof BITOR;
    BITRSHIFT: typeof BITRSHIFT;
    BITXOR: typeof BITXOR;
    CEILING: typeof CEILING;
    COMBIN: typeof COMBIN;
    COMBINA: typeof COMBINA;
    COMPLEX: typeof COMPLEX;
    CORREL: typeof CORREL;
    COS: typeof COS;
    COSH: typeof COSH;
    COT: typeof COT;
    COTH: typeof COTH;
    COUNT: typeof COUNT;
    COUNTA: typeof COUNTA;
    COUNTBLANK: typeof COUNTBLANK;
    COVAR: typeof COVARP;
    "COVARIANCE.P": typeof COVARP;
    "COVARIANCE.S": typeof COVARS;
    CSC: typeof CSC;
    CSCH: typeof CSCH;
    DEC2BIN: typeof DEC2BIN;
    DEC2HEX: typeof DEC2HEX;
    DEC2OCT: typeof DEC2OCT;
    DECIMAL: typeof DECIMAL;
    DEGREES: typeof DEGREES;
    DELTA: typeof DELTA;
    DEVSQ: typeof DEVSQ;
    DIVIDE: typeof DIVIDE;
    EQ: typeof EQ;
    ERF: typeof ERF;
    ERFC: typeof ERFC;
    EVEN: typeof EVEN;
    EXP: typeof EXP;
    FACT: typeof FACT;
    FACTDOUBLE: typeof FACTDOUBLE;
    FISHER: typeof FISHER;
    FISHERINV: typeof FISHERINV;
    FLOOR: typeof FLOOR;
    GAMMA: typeof GAMMA;
    GCD: typeof GCD;
    GEOMEAN: typeof GEOMEAN;
    GESTEP: typeof GESTEP;
    GT: typeof GT;
    GTE: typeof GTE;
    HARMEAN: typeof HARMEAN;
    HEX2BIN: typeof HEX2BIN;
    HEX2DEC: typeof HEX2DEC;
    HEX2OCT: typeof HEX2OCT;
    IMABS: typeof IMABS;
    IMAGINARY: typeof IMAGINARY;
    IMCONJUGATE: typeof IMCONJUGATE;
    IMCOS: typeof IMCOS;
    IMCOSH: typeof IMCOSH;
    IMCOT: typeof IMCOT;
    IMCSC: typeof IMCSC;
    IMCSCH: typeof IMCSCH;
    IMDIV: typeof IMDIV;
    IMEXP: typeof IMEXP;
    IMLN: typeof IMLN;
    IMPOWER: typeof IMPOWER;
    IMPRODUCT: typeof IMPRODUCT;
    IMREAL: typeof IMREAL;
    IMSEC: typeof IMSEC;
    IMSECH: typeof IMSECH;
    IMSIN: typeof IMSIN;
    IMSINH: typeof IMSINH;
    IMSQRT: typeof IMSQRT;
    IMSUB: typeof IMSUB;
    IMSUM: typeof IMSUM;
    IMTAN: typeof IMTAN;
    INT: typeof INT;
    LARGE: typeof LARGE;
    LN: typeof LN;
    LOG: typeof LOG;
    LOG10: typeof LOG10;
    LT: typeof LT;
    LTE: typeof LTE;
    MAX: typeof MAX;
    MEDIAN: typeof MEDIAN;
    MIN: typeof MIN;
    MINUS: typeof MINUS;
    MOD: typeof MOD;
    MROUND: typeof MROUND;
    MULTINOMIAL: typeof MULTINOMIAL;
    MULTIPLY: typeof MULTIPLY;
    NE: typeof NE;
    OCT2BIN: typeof OCT2BIN;
    OCT2DEC: typeof OCT2DEC;
    OCT2HEX: typeof OCT2HEX;
    ODD: typeof ODD;
    PERCENTILE: typeof PERCENTILE;
    "PERCENTILE.INC": typeof PERCENTILE;
    "PERCENTILE.EXC": typeof PERCENTILEEXC;
    PERMUT: typeof PERMUT;
    PI: typeof PI;
    POW: typeof POW;
    POWER: typeof POWER;
    PRODUCT: typeof PRODUCT;
    QUARTILE: typeof QUARTILE;
    "QUARTILE.INC": typeof QUARTILE;
    "QUARTILE.EXC": typeof QUARTILEEXC;
    QUOTIENT: typeof QUOTIENT;
    RADIANS: typeof RADIANS;
    RAND: typeof RAND;
    RANDBETWEEN: typeof RANDBETWEEN;
    ROMAN: typeof ROMAN;
    ROUND: typeof ROUND;
    ROUNDDOWN: typeof ROUNDDOWN;
    ROUNDUP: typeof ROUNDUP;
    SEC: typeof SEC;
    SECH: typeof SECH;
    SIGN: typeof SIGN;
    SIN: typeof SIN;
    SINH: typeof SINH;
    SMALL: typeof SMALL;
    SQRT: typeof SQRT;
    SQRTPI: typeof SQRTPI;
    STDEV: typeof STDEV;
    "STDEV.S": typeof STDEV;
    "STDEV.P": typeof STDEVP;
    STDEVA: typeof STDEVA;
    STDEVP: typeof STDEVP;
    STDEVPA: typeof STDEVPA;
    STEYX: typeof STEYX;
    SUBTOTAL: typeof SUBTOTAL;
    SUM: typeof SUM;
    SUMPRODUCT: typeof SUMPRODUCT;
    SUMSQ: typeof SUMSQ;
    SUMX2MY2: typeof SUMX2MY2;
    SUMX2PY2: typeof SUMX2PY2;
    SUMXMY2: typeof SUMXMY2;
    TAN: typeof TAN;
    TANH: typeof TANH;
    TRUNC: typeof TRUNC;
    VAR: typeof VAR;
    "VAR.S": typeof VAR;
    "VAR.P": typeof VARP;
    VARA: typeof VARA;
    VARP: typeof VARP;
    VARPA: typeof VARPA;
    WEIBULL: typeof WEIBULL;
    "WEIBULL.DIST": typeof WEIBULL;
};
export default methods;
